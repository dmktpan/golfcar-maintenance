const API_BASE = 'http://localhost:3000/api';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
async function testAPI(endpoint, method = 'GET', data = null) {
  try {
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
    };

    if (data) {
      options.body = JSON.stringify(data);
    }

    const response = await fetch(`${API_BASE}${endpoint}`, options);
    const result = await response.json();
    
    console.log(`\n${method} ${endpoint}:`);
    console.log(`Status: ${response.status}`);
    console.log('Response:', result);
    
    return { status: response.status, data: result };
  } catch (error) {
    console.error(`Error testing ${method} ${endpoint}:`, error);
    return { status: 500, error: error.message };
  }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function testAllFunctions() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n');

  // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (GET)
  console.log('üìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (GET APIs)');
  console.log('='.repeat(50));
  
  await testAPI('/users');
  await testAPI('/golf-courses');
  await testAPI('/vehicles');
  await testAPI('/parts');
  await testAPI('/jobs');
  await testAPI('/parts-usage-logs');
  await testAPI('/serial-history');

  // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (POST)
  console.log('\nüìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (POST APIs)');
  console.log('='.repeat(50));

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Golf Course ‡πÉ‡∏´‡∏°‡πà
  const newGolfCourse = {
    name: '‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Test Course'
  };
  const golfCourseResult = await testAPI('/golf-courses', 'POST', newGolfCourse);
  const golfCourseId = golfCourseResult.data?.data?.id;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏´‡∏°‡πà
  const newUser = {
    code: 'TEST001',
    username: 'testuser',
    name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    role: 'staff',
    golf_course_id: golfCourseId || '1',
    golf_course_name: '‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Test Course'
  };
  const userResult = await testAPI('/users', 'POST', newUser);
  const userId = userResult.data?.data?.id;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Vehicle ‡πÉ‡∏´‡∏°‡πà
  const newVehicle = {
    serial_number: 'TEST-SERIAL-001',
    vehicle_number: 'TEST-001',
    golf_course_id: golfCourseId || '1',
    golf_course_name: '‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Test Course',
    model: 'EZGO Test Model',
    battery_serial: 'BAT-TEST-001',
    status: 'active'
  };
  const vehicleResult = await testAPI('/vehicles', 'POST', newVehicle);
  const vehicleId = vehicleResult.data?.data?.id;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Part ‡πÉ‡∏´‡∏°‡πà
  const newPart = {
    name: '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    unit: '‡∏ä‡∏¥‡πâ‡∏ô',
    stock_qty: 100,
    min_qty: 10,
    max_qty: 200
  };
  const partResult = await testAPI('/parts', 'POST', newPart);
  const partId = partResult.data?.data?.id;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Job ‡πÉ‡∏´‡∏°‡πà (PM)
  const newJobPM = {
    type: 'PM',
    status: 'pending',
    vehicle_id: vehicleId || '1',
    vehicle_number: 'TEST-001',
    golf_course_id: golfCourseId || '1',
    user_id: userId || '1',
    userName: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    system: 'brake',
    subTasks: ['‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡πâ‡∏≤‡πÄ‡∏ö‡∏£‡∏Å', '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏£‡∏Å'],
    remarks: '‡∏á‡∏≤‡∏ô PM ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    battery_serial: 'BAT-TEST-001',
    parts: [
      {
        part_id: partId || '1',
        part_name: '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        quantity_used: 2
      }
    ],
    partsNotes: '‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2 ‡∏ä‡∏¥‡πâ‡∏ô',
    images: []
  };
  const jobPMResult = await testAPI('/jobs', 'POST', newJobPM);
  const jobPMId = jobPMResult.data?.data?.id;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Job ‡πÉ‡∏´‡∏°‡πà (BM)
  const newJobBM = {
    type: 'BM',
    status: 'pending',
    vehicle_id: vehicleId || '1',
    vehicle_number: 'TEST-001',
    golf_course_id: golfCourseId || '1',
    user_id: userId || '1',
    userName: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    bmCause: 'breakdown',
    remarks: '‡∏á‡∏≤‡∏ô BM ‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡πÄ‡∏ö‡∏£‡∏Å‡πÄ‡∏™‡∏µ‡∏¢',
    battery_serial: 'BAT-TEST-001',
    parts: [],
    partsNotes: '',
    images: []
  };
  const jobBMResult = await testAPI('/jobs', 'POST', newJobBM);
  const jobBMId = jobBMResult.data?.data?.id;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Parts Usage Log
  const newPartsUsageLog = {
    jobId: jobPMId || '1',
    partName: '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    partId: partId || '1',
    quantityUsed: 2,
    usedDate: new Date().toISOString().split('T')[0],
    usedBy: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    vehicleNumber: 'TEST-001',
    vehicleSerial: 'TEST-SERIAL-001',
    golfCourseName: '‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Test Course',
    jobType: 'PM',
    system: 'brake',
    notes: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà'
  };
  await testAPI('/parts-usage-logs', 'POST', newPartsUsageLog);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History
  const newSerialHistory = {
    serial_number: 'TEST-SERIAL-001',
    vehicle_id: vehicleId || '1',
    vehicle_number: 'TEST-001',
    action_type: 'maintenance',
    action_date: new Date().toISOString(),
    details: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
    performed_by: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
    performed_by_id: userId || '1',
    golf_course_id: golfCourseId || '1',
    golf_course_name: '‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Test Course',
    is_active: true,
    related_job_id: jobPMId || '1',
    job_type: 'PM',
    status: 'completed'
  };
  await testAPI('/serial-history', 'POST', newSerialHistory);

  // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (PUT)
  console.log('\nüîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (PUT APIs)');
  console.log('='.repeat(50));

  if (jobPMId) {
    const updatedJob = {
      ...newJobPM,
      status: 'completed',
      remarks: '‡∏á‡∏≤‡∏ô PM ‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
      parts: [
        {
          part_id: partId || '1',
          part_name: '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          quantity_used: 3
        }
      ]
    };
    await testAPI(`/jobs/${jobPMId}`, 'PUT', updatedJob);
  }

  if (userId) {
    const updatedUser = {
      ...newUser,
      name: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß)',
      role: 'supervisor'
    };
    await testAPI(`/users/${userId}`, 'PUT', updatedUser);
  }

  if (vehicleId) {
    const updatedVehicle = {
      ...newVehicle,
      status: 'inactive',
      model: 'EZGO Test Model (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß)'
    };
    await testAPI(`/vehicles/${vehicleId}`, 'PUT', updatedVehicle);
  }

  if (partId) {
    const updatedPart = {
      ...newPart,
      stock_qty: 95,
      name: '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß)'
    };
    await testAPI(`/parts/${partId}`, 'PUT', updatedPart);
  }

  if (golfCourseId) {
    const updatedGolfCourse = {
      name: '‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Test Course (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß)'
    };
    await testAPI(`/golf-courses/${golfCourseId}`, 'PUT', updatedGolfCourse);
  }

  // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (GET by ID)
  console.log('\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (GET by ID)');
  console.log('='.repeat(50));

  if (jobPMId) await testAPI(`/jobs/${jobPMId}`);
  if (userId) await testAPI(`/users/${userId}`);
  if (vehicleId) await testAPI(`/vehicles/${vehicleId}`);
  if (partId) await testAPI(`/parts/${partId}`);
  if (golfCourseId) await testAPI(`/golf-courses/${golfCourseId}`);

  // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Authentication
  console.log('\nüîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Authentication');
  console.log('='.repeat(50));

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Staff Login
  const staffLoginData = {
    identifier: 'admin000',
    loginType: 'staff'
  };
  await testAPI('/auth/login', 'POST', staffLoginData);

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Admin Login
  const adminLoginData = {
    identifier: 'admin000',
    password: '123456',
    loginType: 'admin'
  };
  await testAPI('/auth/login', 'POST', adminLoginData);

  // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Special Endpoints
  console.log('\n‚öôÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Special Endpoints');
  console.log('='.repeat(50));

  await testAPI('/check-migration');
  await testAPI('/maintenance');

  // 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (DELETE) - ‡∏ó‡∏≥‡πÉ‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  console.log('\nüóëÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (DELETE APIs)');
  console.log('='.repeat(50));

  // ‡∏•‡∏ö Jobs ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ foreign key ‡πÑ‡∏õ‡∏¢‡∏±‡∏á users, vehicles)
  if (jobPMId) await testAPI(`/jobs/${jobPMId}`, 'DELETE');
  if (jobBMId) await testAPI(`/jobs/${jobBMId}`, 'DELETE');

  // ‡∏•‡∏ö Parts, Users, Vehicles
  if (partId) await testAPI(`/parts/${partId}`, 'DELETE');
  if (userId) await testAPI(`/users/${userId}`, 'DELETE');
  if (vehicleId) await testAPI(`/vehicles/${vehicleId}`, 'DELETE');

  // ‡∏•‡∏ö Golf Course ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  if (golfCourseId) await testAPI(`/golf-courses/${golfCourseId}`, 'DELETE');

  // 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö
  console.log('\nüìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö');
  console.log('='.repeat(50));

  await testAPI('/users');
  await testAPI('/golf-courses');
  await testAPI('/vehicles');
  await testAPI('/parts');
  await testAPI('/jobs');

  console.log('\n‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  console.log('='.repeat(50));
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testAllFunctions().catch(console.error);