'use client';

import React from 'react';
import Image from 'next/image';
import { Job, GolfCourse, User, Vehicle, PARTS_BY_SYSTEM_DISPLAY } from '@/lib/data';
import StatusBadge from './StatusBadge';
import styles from './JobDetailsModal.module.css';
import { getSystemDisplayName, getSystemIcon } from '../lib/systemUtils';

interface JobDetailsModalProps {
  job: Job;
  golfCourses: GolfCourse[]; // ‡πÄ‡∏û‡∏¥‡πà‡∏° props
  users: User[];
  vehicles: Vehicle[];
  partsUsageLog?: any[]; // ‡πÄ‡∏û‡∏¥‡πà‡∏° props ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PartsUsageLog
  onClose: () => void;
}

const JobDetailsModal = ({ job, golfCourses, users, vehicles, partsUsageLog = [], onClose }: JobDetailsModalProps) => {
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getPartName ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
  const getPartName = (part: any) => {
    // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: name > part_name > ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å part_id
    if (part.name) {
      return part.name;
    }
    
    if (part.part_name) {
      return part.part_name;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ part_id ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å PARTS_BY_SYSTEM_DISPLAY
    if (part.part_id) {
      for (const system of Object.values(PARTS_BY_SYSTEM_DISPLAY)) {
        const partInfo = system.find((p: any) => p.id === parseInt(part.part_id));
        if (partInfo) {
          return partInfo.name;
        }
      }
      return `‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà ID: ${part.part_id}`;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ
    return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà';
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏à‡∏≤‡∏Å PartsUsageLog
  const getPartsFromUsageLog = () => {
    if (!partsUsageLog || partsUsageLog.length === 0) {
      return [];
    }
    
    // ‡∏´‡∏≤ logs ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö job ‡∏ô‡∏µ‡πâ
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á jobId ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞ jobId ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ObjectId
    let jobUsageLogs = partsUsageLog.filter(log => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ jobId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const exactMatch = log.jobId === job.id;
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ job.id ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ log.jobId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà jobId ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
      const startsWithJobId = job.id.startsWith(log.jobId.toString());
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ log.jobId ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ job.id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà job.id ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
      const logStartsWithJobId = log.jobId.toString().startsWith(job.id);
      
      return exactMatch || startsWithJobId || logStartsWithJobId;
    });
    
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å vehicleNumber
    if (jobUsageLogs.length === 0) {
      jobUsageLogs = partsUsageLog.filter(log => 
        log.vehicleNumber === job.vehicle_number ||
        log.vehicleSerial === job.vehicle_number
      );
    }
    
    if (!jobUsageLogs || jobUsageLogs.length === 0) {
      return [];
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á PartsUsageLog ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    const parts = jobUsageLogs.map(log => ({
      name: log.partName, // ‡πÉ‡∏ä‡πâ partName ‡πÅ‡∏ó‡∏ô name
      quantity_used: log.quantityUsed,
      system: log.system
    }));
    
    return parts;
  };

  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏à‡∏≤‡∏Å job.parts ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å PartsUsageLog ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å job.parts_used
  let partsToDisplay = [];
  
  // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô:
  // - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô pending: job.parts > job.parts_used
  // - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô approved/completed: PartsUsageLog > job.parts > job.parts_used
  if (job.status === 'approved' || job.status === 'completed') {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å PartsUsageLog ‡∏Å‡πà‡∏≠‡∏ô
    const partsFromUsageLog = getPartsFromUsageLog();
    if (partsFromUsageLog.length > 0) {
      partsToDisplay = partsFromUsageLog;
    } else if (job.parts && job.parts.length > 0) {
      partsToDisplay = job.parts;
    } else if ((job as any).parts_used && (job as any).parts_used.length > 0) {
      // ‡πÅ‡∏õ‡∏•‡∏á parts_used string array ‡πÄ‡∏õ‡πá‡∏ô object format
      partsToDisplay = (job as any).parts_used.map((partString: string, index: number) => {
        // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å string ‡πÄ‡∏ä‡πà‡∏ô "‡πÅ‡∏õ‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏Ñ (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: 1)"
        const match = partString.match(/^(.+?)\s*\(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:\s*(\d+)\)$/);
        if (match) {
          return {
            name: match[1].trim(),
            quantity_used: parseInt(match[2]),
            part_name: match[1].trim()
          };
        } else {
          return {
            name: partString,
            quantity_used: 1,
            part_name: partString
          };
        }
      });
    }
  } else {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô pending ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å job.parts ‡∏Å‡πà‡∏≠‡∏ô
    if (job.parts && job.parts.length > 0) {
      partsToDisplay = job.parts;
    } else {
      const partsFromUsageLog = getPartsFromUsageLog();
      if (partsFromUsageLog.length > 0) {
        partsToDisplay = partsFromUsageLog;
      } else if ((job as any).parts_used && (job as any).parts_used.length > 0) {
        // ‡πÅ‡∏õ‡∏•‡∏á parts_used string array ‡πÄ‡∏õ‡πá‡∏ô object format
        partsToDisplay = (job as any).parts_used.map((partString: string, index: number) => {
          // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å string ‡πÄ‡∏ä‡πà‡∏ô "‡πÅ‡∏õ‡πâ‡∏ô‡πÄ‡∏ö‡∏£‡∏Ñ (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: 1)"
          const match = partString.match(/^(.+?)\s*\(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:\s*(\d+)\)$/);
          if (match) {
            return {
              name: match[1].trim(),
              quantity_used: parseInt(match[2]),
              part_name: match[1].trim()
            };
          } else {
            return {
              name: partString,
              quantity_used: 1,
              part_name: partString
            };
          }
        });
      }
    }
  }

  const getGolfCourseName = (courseId: string | undefined) => {
    if (!courseId) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    const course = golfCourses.find(c => c.id === courseId);
    return course ? course.name : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  };

  const getAssignedByName = (userId: string) => {
    const user = users.find(u => u.id.toString() === userId);
    return user ? user.name : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
  };

  const getVehicleInfo = (vehicleId: string) => {
    return vehicles.find(v => v.id === vehicleId);
  };

  const vehicleInfo = getVehicleInfo(job.vehicle_id);

  const formatDate = (dateInput: string | Date | undefined | null) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!dateInput) {
        return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
      }

      let date: Date;
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Date object ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      if (dateInput instanceof Date) {
        date = dateInput;
      }
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string
      else if (typeof dateInput === 'string') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (dateInput.trim() === '') {
          return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô timestamp (number string)
        if (/^\d+$/.test(dateInput)) {
          date = new Date(parseInt(dateInput));
        } else {
          date = new Date(dateInput);
        }
      } else {
        return '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å';
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (isNaN(date.getTime())) {
        console.warn('Invalid date:', dateInput);
        return '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const now = new Date();
      const minDate = new Date('2020-01-01');
      const maxDate = new Date(now.getTime() + (365 * 24 * 60 * 60 * 1000)); // 1 ‡∏õ‡∏µ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤

      if (date < minDate || date > maxDate) {
        console.warn('Date out of reasonable range:', dateInput, date);
        return '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°';
      }

      return date.toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'Asia/Bangkok' // ‡∏£‡∏∞‡∏ö‡∏∏ timezone ‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      });
    } catch (error) {
      console.error('Error formatting date:', error, dateInput);
      return '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
    }
  };

  const getJobTypeLabel = (type: string) => {
    const typeLabels: Record<string, string> = {
      'PM': 'Preventive Maintenance',
      'BM': 'Breakdown Maintenance',
      'Recondition': 'Recondition'
    };
    return typeLabels[type] || type;
  };

  const getJobTypeIcon = (type: string) => {
    const typeIcons: Record<string, string> = {
      'PM': 'üîÑ',
      'BM': 'üö®',
      'Recondition': 'üî®'
    };
    return typeIcons[type] || 'üîß';
  };

  return (
    <div className={styles['modal-overlay']} onClick={onClose}>
      <div className={styles['modal-content']} onClick={(e) => e.stopPropagation()}>
        <div className={styles['modal-header']}>
          <div className={styles['header-left']}>
            <div className={styles['job-icon']}>üìã</div>
            <div>
              <h2>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô #{job.id}</h2>
              <p className={styles['vehicle-info']}>üöó ‡∏£‡∏ñ‡πÄ‡∏ö‡∏≠‡∏£‡πå {job.vehicle_number}</p>
            </div>
          </div>
          <button className={styles['modal-close-btn']} onClick={onClose}>
            ‚úï
          </button>
        </div>

        <div className={styles['modal-body']}>
          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
          <div className={styles['job-info-section']}>
            <h3>
              <span className={styles['section-icon']}>‚ÑπÔ∏è</span>
              ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            </h3>
            <div className={styles['info-grid']}>
              <div className={styles['info-item']}>
                <label>
                  <span className={styles['label-icon']}>{getJobTypeIcon(job.type)}</span>
                  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô:
                </label>
                <span className={styles['job-type-badge']}>{getJobTypeLabel(job.type)}</span>
              </div>
              <div className={styles['info-item']}>
                <label>
                  <span className={styles['label-icon']}>üìä</span>
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:
                </label>
                <StatusBadge status={job.status} />
              </div>
              <div className={styles['info-item']}>
                <label>
                  <span className={styles['label-icon']}>üöó</span>
                  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ:
                </label>
                <span>{job.vehicle_number}</span>
              </div>
              <div className={styles['info-item']}>
                <label>
                  <span className={styles['label-icon']}>üîã</span>
                  ‡∏ã‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÅ‡∏ö‡∏ï:
                </label>
                <span>{job.battery_serial || vehicleInfo?.battery_serial || '-'}</span>
              </div>
              <div className={styles['info-item']}>
                <label>
                  <span className={styles['label-icon']}>üèåÔ∏è</span>
                  ‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü:
                </label>
                <span>{getGolfCourseName(job.golf_course_id)}</span>
              </div>
              <div className={styles['info-item']}>
                <label>
                  <span className={styles['label-icon']}>{getSystemIcon(job.system || '')}</span>
                  ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏°:
                </label>
                <span>{getSystemDisplayName(job.system || '')}</span>
              </div>
              {job.type === 'BM' && job.bmCause && (
                <div className={styles['info-item']}>
                  <label>
                    <span className={styles['label-icon']}>‚ö†Ô∏è</span>
                    ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢:
                  </label>
                  <span>{job.bmCause === 'breakdown' ? '‡πÄ‡∏™‡∏µ‡∏¢' : '‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏'}</span>
                </div>
              )}
              <div className={styles['info-item']}>
                <label>
                  <span className={styles['label-icon']}>üë§</span>
                  ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö:
                </label>
                <span>{job.userName}</span>
              </div>
              {job.assigned_by && (
                <div className={styles['info-item']}>
                  <label>
                    <span className={styles['label-icon']}>üë®‚Äçüíº</span>
                    ‡∏ú‡∏π‡πâ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢:
                  </label>
                  <span>{job.assigned_by_name || getAssignedByName(job.assigned_by)}</span>
                </div>
              )}
              <div className={styles['info-item']}>
                <label>
                  <span className={styles['label-icon']}>üìÖ</span>
                  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:
                </label>
                <span>{formatDate((job as any).createdAt)}</span>
              </div>
              {job.updated_at && (
                <div className={styles['info-item']}>
                  <label>
                    <span className={styles['label-icon']}>üîÑ</span>
                    ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:
                  </label>
                  <span>{formatDate(job.updated_at)}</span>
                </div>
              )}
            </div>
          </div>

          {/* ‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢ */}
          {job.subTasks && job.subTasks.length > 0 && (
            <div className={styles['job-info-section']}>
              <h3>
                <span className={styles['section-icon']}>üìù</span>
                ‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥
              </h3>
              <ul className={styles['subtasks-list']}>
                {job.subTasks.map((task, index) => (
                  <li key={`subtask-${index}-${task.slice(0, 10)}`} className={styles['subtask-item']}>
                    <span className={styles['task-number']}>{index + 1}</span>
                    {task}
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ */}
          {partsToDisplay && partsToDisplay.length > 0 ? (
            <div className={styles['job-info-section']}>
              <h3>
                <span className={styles['section-icon']}>üîß</span>
                ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
              </h3>
              <div className={styles['parts-table']}>
                <table>
                  <thead>
                    <tr>
                      <th>
                        <span className={styles['table-icon']}>üî©</span>
                        ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
                      </th>
                      <th>
                        <span className={styles['table-icon']}>üìä</span>
                        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {partsToDisplay.map((part: any, index: number) => (
                      <tr key={`part-${index}-${getPartName(part).slice(0, 10)}`}>
                        <td>{getPartName(part)}</td>
                        <td>
                            <span className={styles['quantity-badge']}>
                              {part.quantity_used || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                            </span>
                          </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          ) : (
            <div className={styles['job-info-section']}>
              <h3>
                <span className={styles['section-icon']}>üîß</span>
                ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
              </h3>
              <div className={styles['notes-container']}>
                <div className={styles['notes-icon']}>‚ÑπÔ∏è</div>
                <p className={styles['notes-text']}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ</p>
              </div>

            </div>
          )}

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà */}
          {job.partsNotes && (
            <div className={styles['job-info-section']}>
              <h3>
                <span className={styles['section-icon']}>üìù</span>
                ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
              </h3>
              <div className={styles['notes-container']}>
                <div className={styles['notes-icon']}>üí¨</div>
                <p className={styles['notes-text']}>{job.partsNotes}</p>
              </div>
            </div>
          )}

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
          {job.remarks && (
            <div className={styles['job-info-section']}>
              <h3>
                <span className={styles['section-icon']}>üìã</span>
                ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
              </h3>
              <div className={styles['notes-container']}>
                <div className={styles['notes-icon']}>üí≠</div>
                <p className={styles['notes-text']}>{job.remarks}</p>
              </div>
            </div>
          )}

          {/* ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
          {job.images && job.images.length > 0 && (
            <div className={styles['job-info-section']}>
              <h3>
                <span className={styles['section-icon']}>üì∑</span>
                ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
              </h3>
              <div className={styles['image-gallery']}>
                {job.images.map((image, index) => (
                  <div key={`image-${index}-${image.slice(-10)}`} className={styles['image-item']}>
                    <Image 
                      src={image} 
                      alt={`‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏á‡∏≤‡∏ô ${index + 1}`} 
                      className={styles['job-image']}
                      width={200}
                      height={150}
                      onClick={() => window.open(image, '_blank')}
                    />
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        <div className={styles['modal-footer']}>
          <button className={styles['btn-secondary']} onClick={onClose}>
            <span className={styles['btn-icon']}>‚úï</span>
            ‡∏õ‡∏¥‡∏î
          </button>
        </div>
      </div>
    </div>
  );
};

export default JobDetailsModal;