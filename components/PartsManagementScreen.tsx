
'use client';

import React, { useState, useMemo, useCallback } from 'react';
import { Vehicle, PartsUsageLog, View, GolfCourse } from '@/lib/data';
import PartsHistoryModal from './PartsHistoryModal';
import * as XLSX from 'xlsx';

interface PartsManagementScreenProps {
    partsUsageLog: PartsUsageLog[];
    setView: (view: View) => void;
    vehicles: Vehicle[];
    golfCourses: GolfCourse[];
}

function PartsManagementScreen({ 
    partsUsageLog, 
    setView,
    vehicles,
    golfCourses 
}: PartsManagementScreenProps) {
    console.log('üîç PartsManagementScreen rendered with partsUsageLog:', partsUsageLog);
    console.log('üìä PartsUsageLog count:', partsUsageLog.length);
    
    const [selectedSerial, setSelectedSerial] = useState('');
    const [showModal, setShowModal] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [filters, setFilters] = useState({
        golfCourse: '',
        vehicleNumber: '',
        serialNumber: '',
        dateFrom: '',
        dateTo: ''
    });
    
    const [sortBy, setSortBy] = useState<'serial' | 'vehicle' | 'golfCourse' | 'partsCount' | 'lastUpdate'>('lastUpdate');
    const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
    
    // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export Options
    const [showExportModal, setShowExportModal] = useState(false);
    const [exportType, setExportType] = useState<'all' | 'serial' | 'golfCourse'>('all');
    const [selectedExportSerial, setSelectedExportSerial] = useState('');
    const [selectedExportGolfCourse, setSelectedExportGolfCourse] = useState('');

    // ‡∏î‡∏∂‡∏á Serial Numbers ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
    const serialsWithHistory = useMemo(() => {
        const serialsWithLogs = Array.from(new Set(partsUsageLog.map(log => log.vehicleSerial)));
        return serialsWithLogs.sort();
    }, [partsUsageLog]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏à‡∏≤‡∏Å Serial Number
    const getVehicleBySerial = useCallback((serialNumber: string) => {
        return vehicles.find(v => v.serial_number === serialNumber);
    }, [vehicles]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡∏à‡∏≤‡∏Å Vehicle
    const getGolfCourseNameByVehicle = useCallback((vehicle: Vehicle | undefined) => {
        if (!vehicle) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        const golfCourse = golfCourses.find(gc => gc.id === vehicle.golf_course_id);
        return golfCourse?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    }, [golfCourses]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Serial
    const getPartsCountBySerial = useCallback((serialNumber: string) => {
        return partsUsageLog.filter(log => log.vehicleSerial === serialNumber).length;
    }, [partsUsageLog]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const filteredAndSortedSerials = useMemo(() => {
        const filtered = serialsWithHistory.filter(serial => {
            const vehicle = getVehicleBySerial(serial);
            const golfCourseName = getGolfCourseNameByVehicle(vehicle);
            
            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            const matchesSearch = !searchTerm || 
                serial.toLowerCase().includes(searchTerm.toLowerCase()) ||
                (vehicle?.vehicle_number || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
                golfCourseName.toLowerCase().includes(searchTerm.toLowerCase());
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ô‡∏≤‡∏°
            const matchesGolfCourse = !filters.golfCourse || 
                golfCourseName === filters.golfCourse;
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ
            const matchesVehicleNumber = !filters.vehicleNumber || 
                (vehicle?.vehicle_number || '').toLowerCase().includes(filters.vehicleNumber.toLowerCase());
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Serial Number
            const matchesSerialNumber = !filters.serialNumber || 
                serial.toLowerCase().includes(filters.serialNumber.toLowerCase());
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            let matchesDateRange = true;
            if (filters.dateFrom || filters.dateTo) {
                const serialLogs = partsUsageLog.filter(log => log.vehicleSerial === serial);
                if (serialLogs.length > 0) {
                    const latestDate = new Date(Math.max(...serialLogs.map(log => new Date(log.usedDate).getTime())));
                    const earliestDate = new Date(Math.min(...serialLogs.map(log => new Date(log.usedDate).getTime())));
                    
                    if (filters.dateFrom) {
                        matchesDateRange = matchesDateRange && latestDate >= new Date(filters.dateFrom);
                    }
                    if (filters.dateTo) {
                        matchesDateRange = matchesDateRange && earliestDate <= new Date(filters.dateTo);
                    }
                }
            }
            
            return matchesSearch && matchesGolfCourse && matchesVehicleNumber && 
                   matchesSerialNumber && matchesDateRange;
        });

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
        filtered.sort((a, b) => {
            let aValue, bValue;
            
            switch (sortBy) {
                case 'serial':
                    aValue = a;
                    bValue = b;
                    break;
                case 'vehicle':
                    aValue = getVehicleBySerial(a)?.vehicle_number || '';
                    bValue = getVehicleBySerial(b)?.vehicle_number || '';
                    break;
                case 'golfCourse':
                    aValue = getGolfCourseNameByVehicle(getVehicleBySerial(a));
                    bValue = getGolfCourseNameByVehicle(getVehicleBySerial(b));
                    break;
                case 'partsCount':
                    aValue = getPartsCountBySerial(a);
                    bValue = getPartsCountBySerial(b);
                    break;
                case 'lastUpdate':
                    const aLatest = partsUsageLog
                        .filter(log => log.vehicleSerial === a)
                        .sort((x, y) => new Date(y.usedDate).getTime() - new Date(x.usedDate).getTime())[0];
                    const bLatest = partsUsageLog
                        .filter(log => log.vehicleSerial === b)
                        .sort((x, y) => new Date(y.usedDate).getTime() - new Date(x.usedDate).getTime())[0];
                    aValue = aLatest ? new Date(aLatest.usedDate).getTime() : 0;
                    bValue = bLatest ? new Date(bLatest.usedDate).getTime() : 0;
                    break;
                default:
                    return 0;
            }
            
            if (typeof aValue === 'string' && typeof bValue === 'string') {
                return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
            } else {
                return sortOrder === 'asc' ? 
                    (aValue as number) - (bValue as number) : 
                    (bValue as number) - (aValue as number);
            }
        });

        return filtered;
    }, [serialsWithHistory, searchTerm, filters, sortBy, sortOrder, partsUsageLog, getGolfCourseNameByVehicle, getPartsCountBySerial, getVehicleBySerial]);

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    const uniqueGolfCourses = useMemo(() => {
        const courses = serialsWithHistory.map(serial => {
            const vehicle = getVehicleBySerial(serial);
            return getGolfCourseNameByVehicle(vehicle);
        });
        return Array.from(new Set(courses)).sort();
    }, [serialsWithHistory, getGolfCourseNameByVehicle, getVehicleBySerial]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Modal
    const handleShowHistory = (serialNumber: string) => {
        setSelectedSerial(serialNumber);
        setShowModal(true);
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î Modal
    const handleCloseModal = () => {
        setShowModal(false);
        setSelectedSerial('');
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Excel
    const exportToExcel = () => {
        let dataToExport: any[] = [];
        let fileName = '';
        
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£ Export
        if (exportType === 'all') {
            // Export ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            dataToExport = partsUsageLog.map(log => {
                const vehicle = vehicles.find(v => v.serial_number === log.vehicleSerial);
                const golfCourse = golfCourses.find(gc => gc.id === vehicle?.golf_course_id);
                
                return {
                    'ID': log.id,
                    'Serial Number': log.vehicleSerial,
                    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ': vehicle?.vehicle_number || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                    '‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü': golfCourse?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                    '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà': log.partName,
                    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': log.quantityUsed,
                    '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô': log.notes || '-',
                    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å': formatDateForExcel(log.usedDate),
                    '‡πÇ‡∏î‡∏¢': log.usedBy || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                };
            });
            fileName = `‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà_‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î_${new Date().toLocaleDateString('th-TH', { timeZone: 'Asia/Bangkok' }).replace(/\//g, '-')}.xlsx`;
            
        } else if (exportType === 'serial') {
            // Export ‡∏ï‡∏≤‡∏° Serial Number
            dataToExport = partsUsageLog
                .filter(log => log.vehicleSerial === selectedExportSerial)
                .map(log => {
                    const vehicle = vehicles.find(v => v.serial_number === log.vehicleSerial);
                    const golfCourse = golfCourses.find(gc => gc.id === vehicle?.golf_course_id);
                    
                    return {
                        'ID': log.id,
                        'Serial Number': log.vehicleSerial,
                        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ': vehicle?.vehicle_number || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                        '‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü': golfCourse?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                        '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà': log.partName,
                        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': log.quantityUsed,
                        '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô': log.notes || '-',
                        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å': formatDateForExcel(log.usedDate),
                        '‡πÇ‡∏î‡∏¢': log.usedBy || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                    };
                });
            fileName = `‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà_${selectedExportSerial}_${new Date().toLocaleDateString('th-TH', { timeZone: 'Asia/Bangkok' }).replace(/\//g, '-')}.xlsx`;
            
        } else if (exportType === 'golfCourse') {
            // Export ‡∏ï‡∏≤‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü
            const golfCourseVehicles = vehicles.filter(v => {
                const golfCourse = golfCourses.find(gc => gc.id === v.golf_course_id);
                return golfCourse?.name === selectedExportGolfCourse;
            });
            const golfCourseSerials = golfCourseVehicles.map(v => v.serial_number);
            
            dataToExport = partsUsageLog
                .filter(log => golfCourseSerials.includes(log.vehicleSerial))
                .map(log => {
                    const vehicle = vehicles.find(v => v.serial_number === log.vehicleSerial);
                    const golfCourse = golfCourses.find(gc => gc.id === vehicle?.golf_course_id);
                    
                    return {
                        'ID': log.id,
                        'Serial Number': log.vehicleSerial,
                        '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ': vehicle?.vehicle_number || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                        '‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü': golfCourse?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                        '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà': log.partName,
                        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô': log.quantityUsed,
                        '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô': log.notes || '-',
                        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å': formatDateForExcel(log.usedDate),
                        '‡πÇ‡∏î‡∏¢': log.usedBy || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                    };
                });
            fileName = `‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà_${selectedExportGolfCourse}_${new Date().toLocaleDateString('th-TH').replace(/\//g, '-')}.xlsx`;
        }

        if (dataToExport.length === 0) {
            alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export');
            return;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel file
        const ws = XLSX.utils.json_to_sheet(dataToExport);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà');
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        const colWidths = [
            { wch: 8 },  // ID
            { wch: 20 }, // Serial Number
            { wch: 12 }, // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ
            { wch: 20 }, // ‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü
            { wch: 25 }, // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
            { wch: 8 },  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            { wch: 30 }, // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            { wch: 20 }, // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            { wch: 15 }  // ‡πÇ‡∏î‡∏¢
        ];
        ws['!cols'] = colWidths;
        
        // Export file
        XLSX.writeFile(wb, fileName);
        setShowExportModal(false);
    };

    const formatDateForExcel = (dateString: string) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('th-TH', { 
            year: 'numeric', 
            month: '2-digit', 
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Asia/Bangkok' // ‡∏£‡∏∞‡∏ö‡∏∏ timezone ‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        });
    };

    const formatDate = (dateString: string) => {
        return new Date(dateString).toLocaleDateString('th-TH', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Asia/Bangkok' // ‡∏£‡∏∞‡∏ö‡∏∏ timezone ‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        });
    };

    return (
        <div className="parts-log-container">
            <div className="parts-log-header">
                <h2>üîß ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ï‡∏≤‡∏° Serial</h2>
                <div className="parts-log-header-actions">
                    <button className="btn-primary" onClick={() => setShowExportModal(true)}>
                        üìä Export Excel
                    </button>
                    <button className="btn-outline" onClick={() => setView('admin_dashboard')}>
                        ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
                    </button>
                </div>
            </div>
            
            <div className="serial-selection-section">
                <div className="selection-header">
                    <h3>üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ï‡∏≤‡∏° Serial Number</h3>
                    <p className="selection-description">
                        ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏±‡∏ô
                    </p>
                </div>

                {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                <div className="search-filter-section">
                    <div className="search-row">
                        <div className="search-input-group">
                            <label>üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</label>
                            <input
                                type="text"
                                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Serial, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ, ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ô‡∏≤‡∏°..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="search-input"
                            />
                        </div>
                    </div>

                    <div className="filter-row">
                        <div className="filter-group">
                            <label>üèåÔ∏è ‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü</label>
                            <select
                                value={filters.golfCourse}
                                onChange={(e) => setFilters({...filters, golfCourse: e.target.value})}
                                className="filter-select"
                            >
                                <option value="">‡∏ó‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏°</option>
                                {uniqueGolfCourses.map(course => (
                                    <option key={course} value={course}>{course}</option>
                                ))}
                            </select>
                        </div>

                        <div className="filter-group">
                            <label>üöó ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ</label>
                            <input
                                type="text"
                                placeholder="‡πÄ‡∏ä‡πà‡∏ô A01, B02..."
                                value={filters.vehicleNumber}
                                onChange={(e) => setFilters({...filters, vehicleNumber: e.target.value})}
                                className="filter-input"
                            />
                        </div>

                        <div className="filter-group">
                            <label>üè∑Ô∏è Serial Number</label>
                            <input
                                type="text"
                                placeholder="‡πÄ‡∏ä‡πà‡∏ô KT-20220601..."
                                value={filters.serialNumber}
                                onChange={(e) => setFilters({...filters, serialNumber: e.target.value})}
                                className="filter-input"
                            />
                        </div>
                    </div>

                    <div className="date-filter-row">
                        <div className="filter-group">
                            <label>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</label>
                            <input
                                type="date"
                                value={filters.dateFrom}
                                onChange={(e) => setFilters({...filters, dateFrom: e.target.value})}
                                className="filter-input"
                            />
                        </div>

                        <div className="filter-group">
                            <label>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
                            <input
                                type="date"
                                value={filters.dateTo}
                                onChange={(e) => setFilters({...filters, dateTo: e.target.value})}
                                className="filter-input"
                            />
                        </div>

                        <div className="filter-group">
                            <label>üìä ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°</label>
                            <select
                                value={sortBy}
                                onChange={(e) => setSortBy(e.target.value as any)}
                                className="filter-select"
                            >
                                <option value="lastUpdate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</option>
                                <option value="serial">Serial Number</option>
                                <option value="vehicle">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ</option>
                                <option value="golfCourse">‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü</option>
                                <option value="partsCount">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà</option>
                            </select>
                        </div>

                        <div className="filter-group">
                            <label>üîÑ ‡∏•‡∏≥‡∏î‡∏±‡∏ö</label>
                            <select
                                value={sortOrder}
                                onChange={(e) => setSortOrder(e.target.value as 'asc' | 'desc')}
                                className="filter-select"
                            >
                                <option value="desc">‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢</option>
                                <option value="asc">‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å</option>
                            </select>
                        </div>
                    </div>

                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á */}
                    <div className="filter-actions">
                        <button
                            onClick={() => {
                                setSearchTerm('');
                                setFilters({
                                    golfCourse: '',
                                    vehicleNumber: '',
                                    serialNumber: '',
                                    dateFrom: '',
                                    dateTo: ''
                                });
                            }}
                            className="btn-clear-filters"
                        >
                            üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                        </button>
                        <div className="results-count">
                            üìã ‡∏û‡∏ö {filteredAndSortedSerials.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {serialsWithHistory.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                        </div>
                    </div>
                </div>
                
                <div className="serial-grid">
                    {filteredAndSortedSerials.length === 0 ? (
                        <div className="no-data">
                            <div className="no-data-icon">
                                {serialsWithHistory.length === 0 ? 'üì¶' : 'üîç'}
                            </div>
                            <h3>
                                {serialsWithHistory.length === 0 
                                    ? '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà' 
                                    : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'
                                }
                            </h3>
                            <p>
                                {serialsWithHistory.length === 0 
                                    ? '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
                                    : '‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á'
                                }
                            </p>
                        </div>
                    ) : (
                        filteredAndSortedSerials.map(serial => {
                            const vehicle = getVehicleBySerial(serial);
                            const golfCourseName = getGolfCourseNameByVehicle(vehicle);
                            const partsCount = getPartsCountBySerial(serial);
                            const latestLog = partsUsageLog
                                .filter(log => log.vehicleSerial === serial)
                                .sort((a, b) => new Date(b.usedDate).getTime() - new Date(a.usedDate).getTime())[0];

                            return (
                                <div key={serial} className="serial-card">
                                    <div className="serial-card-header">
                                        <div className="serial-info">
                                            <h4 className="serial-number">üè∑Ô∏è {serial}</h4>
                                            <p className="vehicle-number">üöó {vehicle?.vehicle_number || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                                        </div>
                                        <div className="parts-count-badge">
                                            {partsCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                                        </div>
                                    </div>
                                    
                                    <div className="serial-card-body">
                                        <div className="info-row">
                                            <span className="info-label">üèåÔ∏è ‡∏™‡∏ô‡∏≤‡∏°:</span>
                                            <span className="info-value">{golfCourseName}</span>
                                        </div>
                                        <div className="info-row">
                                            <span className="info-label">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:</span>
                                            <span className="info-value">
                                                {latestLog ? formatDate(latestLog.usedDate) : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div className="serial-card-footer">
                                        <button 
                                            className="btn-view-history"
                                            onClick={() => handleShowHistory(serial)}
                                        >
                                            üìã ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
                                        </button>
                                    </div>
                                </div>
                            );
                        })
                    )}
                </div>
            </div>

            {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà */}
            {showModal && selectedSerial && (
                <PartsHistoryModal 
                    serialNumber={selectedSerial}
                    partsUsageLog={partsUsageLog}
                    onClose={handleCloseModal}
                />
            )}

            {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£ Export */}
            {showExportModal && (
                <div className="modal-overlay">
                    <div className="export-modal">
                        <div className="export-modal-header">
                            <h3>üìä Export ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÄ‡∏õ‡πá‡∏ô Excel</h3>
                            <button 
                                className="close-button"
                                onClick={() => setShowExportModal(false)}
                            >
                                ‚úï
                            </button>
                        </div>
                        
                        <div className="export-modal-body">
                            <div className="export-option">
                                <label className="export-radio-label">
                                    <input
                                        type="radio"
                                        name="exportType"
                                        value="all"
                                        checked={exportType === 'all'}
                                        onChange={(e) => setExportType(e.target.value as any)}
                                    />
                                    <span className="radio-custom"></span>
                                    üìã Export ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                                </label>
                                <p className="export-description">Export ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
                            </div>

                            <div className="export-option">
                                <label className="export-radio-label">
                                    <input
                                        type="radio"
                                        name="exportType"
                                        value="serial"
                                        checked={exportType === 'serial'}
                                        onChange={(e) => setExportType(e.target.value as any)}
                                    />
                                    <span className="radio-custom"></span>
                                    üè∑Ô∏è Export ‡∏ï‡∏≤‡∏° Serial Number
                                </label>
                                <p className="export-description">Export ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡πÉ‡∏î‡∏Ñ‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á</p>
                                {exportType === 'serial' && (
                                    <select
                                        value={selectedExportSerial}
                                        onChange={(e) => setSelectedExportSerial(e.target.value)}
                                        className="export-select"
                                    >
                                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Serial Number</option>
                                        {serialsWithHistory.map(serial => (
                                            <option key={serial} value={serial}>{serial}</option>
                                        ))}
                                    </select>
                                )}
                            </div>

                            <div className="export-option">
                                <label className="export-radio-label">
                                    <input
                                        type="radio"
                                        name="exportType"
                                        value="golfCourse"
                                        checked={exportType === 'golfCourse'}
                                        onChange={(e) => setExportType(e.target.value as any)}
                                    />
                                    <span className="radio-custom"></span>
                                    üèåÔ∏è Export ‡∏ï‡∏≤‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü
                                </label>
                                <p className="export-description">Export ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü‡πÉ‡∏î‡∏™‡∏ô‡∏≤‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á</p>
                                {exportType === 'golfCourse' && (
                                    <select
                                        value={selectedExportGolfCourse}
                                        onChange={(e) => setSelectedExportGolfCourse(e.target.value)}
                                        className="export-select"
                                    >
                                        <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü</option>
                                        {uniqueGolfCourses.map(course => (
                                            <option key={course} value={course}>{course}</option>
                                        ))}
                                    </select>
                                )}
                            </div>
                        </div>
                        
                        <div className="export-modal-footer">
                            <button 
                                className="btn-cancel"
                                onClick={() => setShowExportModal(false)}
                            >
                                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                            </button>
                            <button 
                                className="btn-export"
                                onClick={exportToExcel}
                                disabled={
                                    (exportType === 'serial' && !selectedExportSerial) ||
                                    (exportType === 'golfCourse' && !selectedExportGolfCourse)
                                }
                            >
                                üìä Export Excel
                            </button>
                        </div>
                    </div>
                </div>
            )}

            <style jsx>{`
                .parts-log-container {
                    padding: 24px;
                    max-width: 1200px;
                    margin: 0 auto;
                }

                .parts-log-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 32px;
                    padding-bottom: 16px;
                    border-bottom: 2px solid #e2e8f0;
                }

                .parts-log-header h2 {
                    margin: 0;
                    font-size: 1.8rem;
                    font-weight: 700;
                    color: #FFFFFFFF;
                }

                .parts-log-header-actions {
                    display: flex;
                    gap: 12px;
                }

                .btn-primary {
                    background: linear-gradient(135deg, #667eea 0%, #667eea 100%);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 8px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.2s ease;
                    font-size: 0.9rem;
                }

                .btn-primary:hover {
                    transform: translateY(-1px);
                    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
                }

                .btn-outline {
                    background: transparent;
                    color: #DDEAFFFF;
                    border: 2px solid #CFE4FFFF;
                    padding: 10px 20px;
                    border-radius: 8px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.2s ease;
                    font-size: 0.9rem;
                }

                .btn-outline:hover {
                    border-color: #667eea;
                    color: #667eea;
                    transform: translateY(-1px);
                }

                .serial-selection-section {
                    background: white;
                    border-radius: 12px;
                    padding: 24px;
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                    border: 1px solid #e2e8f0;
                }

                .selection-header {
                    margin-bottom: 24px;
                    text-align: center;
                }

                .selection-header h3 {
                    margin: 0 0 8px 0;
                    font-size: 1.4rem;
                    font-weight: 600;
                    color: #2d3748;
                }

                .selection-description {
                    margin: 0;
                    color: #718096;
                    font-size: 1rem;
                }

                /* ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */
                .search-filter-section {
                    background: white;
                    border-radius: 12px;
                    padding: 24px;
                    margin-bottom: 24px;
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
                    border: 1px solid #e5e7eb;
                }

                .search-row {
                    margin-bottom: 20px;
                }

                .search-input-group {
                    display: flex;
                    flex-direction: column;
                    gap: 8px;
                }

                .search-input-group label {
                    font-weight: 600;
                    color: #374151;
                    font-size: 14px;
                }

                .search-input {
                    padding: 12px 16px;
                    border: 2px solid #e5e7eb;
                    border-radius: 8px;
                    font-size: 16px;
                    transition: all 0.2s ease;
                    background: #f9fafb;
                }

                .search-input:focus {
                    outline: none;
                    border-color: #3b82f6;
                    background: white;
                    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
                }

                .filter-row, .date-filter-row {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 16px;
                    margin-bottom: 16px;
                }

                .filter-group {
                    display: flex;
                    flex-direction: column;
                    gap: 8px;
                }

                .filter-group label {
                    font-weight: 600;
                    color: #374151;
                    font-size: 14px;
                }

                .filter-input, .filter-select {
                    padding: 10px 12px;
                    border: 2px solid #e5e7eb;
                    border-radius: 6px;
                    font-size: 14px;
                    transition: all 0.2s ease;
                    background: white;
                }

                .filter-input:focus, .filter-select:focus {
                    outline: none;
                    border-color: #3b82f6;
                    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
                }

                .filter-actions {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-top: 20px;
                    padding-top: 20px;
                    border-top: 1px solid #e5e7eb;
                }

                .btn-clear-filters {
                    background: #ef4444;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 6px;
                    font-size: 14px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.2s ease;
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }

                .btn-clear-filters:hover {
                    background: #dc2626;
                    transform: translateY(-1px);
                    box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
                }

                .results-count {
                    font-size: 14px;
                    color: #6b7280;
                    font-weight: 500;
                    background: #f3f4f6;
                    padding: 8px 16px;
                    border-radius: 20px;
                    border: 1px solid #e5e7eb;
                }

                /* Responsive Design */
                @media (max-width: 768px) {
                    .filter-row, .date-filter-row {
                        grid-template-columns: 1fr;
                    }
                    
                    .filter-actions {
                        flex-direction: column;
                        gap: 12px;
                        align-items: stretch;
                    }
                    
                    .results-count {
                        text-align: center;
                    }
                }

                .serial-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
                    gap: 20px;
                }

                .serial-card {
                    background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
                    border: 1px solid #e2e8f0;
                    border-radius: 12px;
                    padding: 20px;
                    transition: all 0.2s ease;
                    cursor: pointer;
                }

                .serial-card:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
                    border-color: #667eea;
                }

                .serial-card-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: flex-start;
                    margin-bottom: 16px;
                }

                .serial-info h4 {
                    margin: 0 0 4px 0;
                    font-size: 1.2rem;
                    font-weight: 700;
                    color: #2d3748;
                }

                .serial-info p {
                    margin: 0;
                    color: #4a5568;
                    font-size: 0.9rem;
                }

                .parts-count-badge {
                    background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
                    color: white;
                    padding: 6px 12px;
                    border-radius: 20px;
                    font-weight: 600;
                    font-size: 0.8rem;
                }

                .serial-card-body {
                    margin-bottom: 16px;
                }

                .info-row {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 8px;
                }

                .info-label {
                    font-weight: 600;
                    color: #4a5568;
                    font-size: 0.85rem;
                }

                .info-value {
                    color: #2d3748;
                    font-size: 0.85rem;
                }

                .serial-card-footer {
                    text-align: center;
                }

                .btn-view-history {
                    background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 8px;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.2s ease;
                    font-size: 0.9rem;
                    width: 100%;
                }

                .btn-view-history:hover {
                    transform: translateY(-1px);
                    box-shadow: 0 4px 12px rgba(66, 153, 225, 0.3);
                }

                .no-data {
                    grid-column: 1 / -1;
                    text-align: center;
                    padding: 60px 20px;
                    color: #718096;
                }

                .no-data-icon {
                    font-size: 4rem;
                    margin-bottom: 16px;
                }

                .no-data h3 {
                    font-size: 1.5rem;
                    margin: 0 0 8px 0;
                    color: #4a5568;
                }

                .no-data p {
                    margin: 0;
                    font-size: 1rem;
                }

                .modal-overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: rgba(0, 0, 0, 0.5);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 1000;
                }

                .export-modal {
                    background: white;
                    border-radius: 12px;
                    width: 90%;
                    max-width: 500px;
                    max-height: 80vh;
                    overflow-y: auto;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                }

                .export-modal-header {
                    padding: 20px 24px 16px;
                    border-bottom: 1px solid #e5e7eb;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }

                .export-modal-header h3 {
                    margin: 0;
                    font-size: 18px;
                    font-weight: 600;
                    color: #1f2937;
                }

                .close-button {
                    background: none;
                    border: none;
                    font-size: 20px;
                    cursor: pointer;
                    color: #6b7280;
                    padding: 4px;
                    border-radius: 4px;
                    transition: all 0.2s;
                }

                .close-button:hover {
                    background: #f3f4f6;
                    color: #374151;
                }

                .export-modal-body {
                    padding: 20px 24px;
                }

                .export-option {
                    margin-bottom: 20px;
                    padding: 16px;
                    border: 2px solid #e5e7eb;
                    border-radius: 8px;
                    transition: all 0.2s;
                }

                .export-option:hover {
                    border-color: #3b82f6;
                    background: #f8fafc;
                }

                .export-radio-label {
                    display: flex;
                    align-items: center;
                    cursor: pointer;
                    font-weight: 500;
                    color: #1f2937;
                    margin-bottom: 8px;
                }

                .export-radio-label input[type="radio"] {
                    display: none;
                }

                .radio-custom {
                    width: 20px;
                    height: 20px;
                    border: 2px solid #d1d5db;
                    border-radius: 50%;
                    margin-right: 12px;
                    position: relative;
                    transition: all 0.2s;
                }

                .export-radio-label input[type="radio"]:checked + .radio-custom {
                    border-color: #3b82f6;
                    background: #3b82f6;
                }

                .export-radio-label input[type="radio"]:checked + .radio-custom::after {
                    content: '';
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    width: 8px;
                    height: 8px;
                    background: white;
                    border-radius: 50%;
                }

                .export-description {
                    margin: 0 0 12px 32px;
                    font-size: 14px;
                    color: #6b7280;
                }

                .export-select {
                    width: 100%;
                    padding: 8px 12px;
                    border: 1px solid #d1d5db;
                    border-radius: 6px;
                    font-size: 14px;
                    margin-left: 32px;
                    margin-top: 8px;
                    background: white;
                }

                .export-select:focus {
                    outline: none;
                    border-color: #3b82f6;
                    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
                }

                .export-modal-footer {
                    padding: 16px 24px 20px;
                    border-top: 1px solid #e5e7eb;
                    display: flex;
                    gap: 12px;
                    justify-content: flex-end;
                }

                .btn-cancel {
                    padding: 8px 16px;
                    border: 1px solid #d1d5db;
                    background: white;
                    color: #374151;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: all 0.2s;
                }

                .btn-cancel:hover {
                    background: #f9fafb;
                    border-color: #9ca3af;
                }

                .btn-export {
                    padding: 8px 16px;
                    background: #10b981;
                    color: white;
                    border: none;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 14px;
                    font-weight: 500;
                    transition: all 0.2s;
                }

                .btn-export:hover:not(:disabled) {
                    background: #059669;
                }

                .btn-export:disabled {
                    background: #d1d5db;
                    cursor: not-allowed;
                }
            `}</style>
        </div>
    );
}

export default PartsManagementScreen;
