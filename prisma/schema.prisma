// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// --- Models ---

model GolfCourse {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  location  String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  users     User[]
  vehicles  Vehicle[]
  jobs      Job[]
  parts     Part[]
}

model User {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  code                 String   @unique
  username             String   @unique
  name                 String
  role                 UserRole
  managed_golf_courses Int[]
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  golfCourse     GolfCourse @relation(fields: [golf_course_id], references: [id])
  golf_course_id   String     @db.ObjectId
  golf_course_name String // Denormalized field for convenience

  createdJobs  Job[]      @relation("CreatedBy")
  assignedJobs Job[]      @relation("AssignedTo")
  historyLogs  SerialHistoryEntry[] @relation("PerformedByUser")
}

model Vehicle {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  vehicle_number   String        @unique
  serial_number    String        @unique
  brand            String?
  model            String?
  year             Int?
  battery_serial   String?
  status           VehicleStatus @default(active)
  transfer_date    DateTime?
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  golfCourse       GolfCourse @relation(fields: [golf_course_id], references: [id])
  golf_course_id   String     @db.ObjectId
  golf_course_name String // Denormalized field for convenience

  jobs             Job[]
  historyLogs      SerialHistoryEntry[]
}

model Job {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  type               JobType
  status             JobStatus
  system             String?
  subTasks           String[]
  remarks            String?
  cost               Float?
  notes              String?
  bmCause            BMCause?
  battery_serial     String?
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Denormalized fields for convenience
  userName           String?
  vehicle_number     String?

  // Relations
  golfCourse         GolfCourse @relation(fields: [golf_course_id], references: [id])
  golf_course_id     String     @db.ObjectId

  vehicle            Vehicle   @relation(fields: [vehicle_id], references: [id])
  vehicle_id         String    @db.ObjectId

  author             User      @relation("CreatedBy", fields: [user_id], references: [id])
  user_id            String    @db.ObjectId

  assignee           User?     @relation("AssignedTo", fields: [assigned_to], references: [id])
  assigned_to        String?   @db.ObjectId
  
  parts              PartsUsageLog[]
  historyLog         SerialHistoryEntry?
}

model Part {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String   @unique
  part_number    String?
  category       String?
  unit           String
  stock_qty      Int
  min_qty        Int?
  max_qty        Int?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  golfCourse     GolfCourse? @relation(fields: [golf_course_id], references: [id])
  golf_course_id String?     @db.ObjectId
  usageLogs      PartsUsageLog[]
}

model PartsUsageLog {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity       Int
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  job            Job      @relation(fields: [jobId], references: [id])
  jobId          String   @db.ObjectId

  part           Part     @relation(fields: [partId], references: [id])
  partId         String   @db.ObjectId
}

model SerialHistoryEntry {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  action_type          ActionType
  action_date          DateTime   @default(now())
  actual_transfer_date DateTime?
  details              String
  is_active            Boolean
  
  // Relations
  vehicle              Vehicle    @relation(fields: [vehicle_id], references: [id])
  vehicle_id           String     @db.ObjectId
  
  performed_by         User       @relation("PerformedByUser", fields: [performed_by_id], references: [id])
  performed_by_id      String     @db.ObjectId

  related_job          Job?       @relation(fields: [related_job_id], references: [id])
  related_job_id       String?    @unique @db.ObjectId
}


// --- Enums ---

enum UserRole {
  admin
  supervisor
  staff
  technician
  viewer
}

enum JobType {
  PM
  BM
  Recondition
}

enum JobStatus {
  pending
  assigned
  in_progress
  completed
  approved
  rejected
}

enum VehicleStatus {
  active
  maintenance
  retired
  parked
  spare
  inactive
}

enum BMCause {
  breakdown
  accident
  wear
  other
}

enum ActionType {
  registration
  transfer
  maintenance
  decommission
  inspection
  status_change
  data_edit
  data_delete
  bulk_transfer
  bulk_upload
}
