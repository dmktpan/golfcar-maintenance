// app/api/proxy/vehicles/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db/prisma';

const EXTERNAL_API_BASE = process.env.EXTERNAL_API_BASE_URL || 'http://golfcar.go2kt.com:8080/api';

// ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å frontend ‡πÑ‡∏õ‡∏¢‡∏±‡∏á External API
function mapStatusToExternalAPI(status: string): string {
  const statusMap: { [key: string]: string } = {
    'active': 'active',
    'ready': 'active',      // ‡πÅ‡∏°‡∏õ ready ‡πÄ‡∏õ‡πá‡∏ô active
    'maintenance': 'inactive', // ‡πÅ‡∏°‡∏õ maintenance ‡πÄ‡∏õ‡πá‡∏ô inactive
    'retired': 'spare'      // ‡πÅ‡∏°‡∏õ retired ‡πÄ‡∏õ‡πá‡∏ô spare
  };
  
  return statusMap[status] || 'active';
}

// ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å External API ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏¢‡∏±‡∏á frontend
function mapStatusFromExternalAPI(externalStatus: string): string {
  const statusMap: { [key: string]: string } = {
    'active': 'active',     // active ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô active
    'inactive': 'maintenance', // inactive ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô maintenance
    'spare': 'retired'      // spare ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô retired
  };
  
  return statusMap[externalStatus] || 'active';
}

// ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
function getStatusLabel(status: string): string {
  switch (status) {
    case 'active': return '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
    case 'ready': return '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ';
    case 'maintenance': return '‡∏£‡∏≠‡∏ã‡πà‡∏≠‡∏°';
    case 'retired': return '‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß';
    default: return '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
async function createSerialHistory(vehicleId: string, originalBody: any, updatedData: any) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
    const currentVehicle = await prisma.vehicle.findUnique({
      where: { id: vehicleId }
    });

    if (!currentVehicle) {
      console.log('‚ö†Ô∏è Vehicle not found in local database, skipping serial history');
      return;
    }

    const changes: string[] = [];
    
    // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)
    if (originalBody.serial_number && originalBody.serial_number.trim() !== currentVehicle.serial_number) {
      changes.push(`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ã‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏•: ${currentVehicle.serial_number} ‚Üí ${originalBody.serial_number.trim()}`);
    }
    if (originalBody.vehicle_number && originalBody.vehicle_number.trim() !== currentVehicle.vehicle_number) {
      changes.push(`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ: ${currentVehicle.vehicle_number} ‚Üí ${originalBody.vehicle_number.trim()}`);
    }
    if (originalBody.golf_course_name && originalBody.golf_course_name.trim() !== currentVehicle.golf_course_name) {
      changes.push(`‡∏™‡∏ô‡∏≤‡∏°: ${currentVehicle.golf_course_name} ‚Üí ${originalBody.golf_course_name.trim()}`);
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏à‡∏≤‡∏Å frontend
    if (originalBody.status) {
      const currentStatus = currentVehicle.status || 'active';
      const newStatus = originalBody.status; // ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏à‡∏≤‡∏Å frontend ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      
      if (currentStatus !== newStatus) {
        const currentStatusLabel = getStatusLabel(currentStatus);
        const newStatusLabel = getStatusLabel(newStatus);
        changes.push(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${currentStatusLabel} ‚Üí ${newStatusLabel}`);
      }
    }
    
    if (originalBody.model && originalBody.model.trim() !== (currentVehicle.model || '')) {
      changes.push(`‡∏£‡∏∏‡πà‡∏ô: ${currentVehicle.model || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‚Üí ${originalBody.model.trim()}`);
    }
    if (originalBody.battery_serial !== undefined) {
      const newBattery = originalBody.battery_serial?.trim() || '';
      const currentBattery = currentVehicle.battery_serial || '';
      if (newBattery !== currentBattery) {
        changes.push(`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà: ${currentBattery || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‚Üí ${newBattery || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      }
    }
    
    if (changes.length > 0) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ history ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const recentHistory = await prisma.serialHistoryEntry.findFirst({
        where: {
          vehicle_id: vehicleId,
          action_type: 'data_edit',
          action_date: {
            gte: new Date(Date.now() - 5000) // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
          },
          details: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ - ${changes.join(', ')}`
        }
      });

      if (recentHistory) {
        console.log('‚ÑπÔ∏è Duplicate history detected, skipping creation');
        return;
      }

      await prisma.serialHistoryEntry.create({
        data: {
          serial_number: originalBody.serial_number?.trim() || currentVehicle.serial_number,
          vehicle_number: originalBody.vehicle_number?.trim() || currentVehicle.vehicle_number,
          action_type: 'data_edit',
          action_date: new Date(),
          details: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ - ${changes.join(', ')}`,
          is_active: true,
          status: 'completed',
          golf_course_name: originalBody.golf_course_name?.trim() || currentVehicle.golf_course_name,
          vehicle_id: vehicleId,
          performed_by_id: '000000000000000000000001' // Default admin ID
        }
      });
      
      console.log('‚úÖ Serial history created successfully:', changes);
    } else {
      console.log('‚ÑπÔ∏è No changes detected, skipping serial history');
    }
  } catch (error) {
    console.error('‚ùå Error creating serial history:', error);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏•‡∏±‡∏Å
  }
}



export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const id = params.id;
    const originalBody = await request.json();
    console.log('üîÑ PUT /api/proxy/vehicles/[id] - External API Only');
    console.log('üìù Vehicle ID:', id);
    console.log('üìù Original request body:', JSON.stringify(originalBody, null, 2));
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Serial History
    const originalStatusForHistory = originalBody.status;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ External API
    const body = { ...originalBody };
    
    // ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö External API
    if (body.status) {
      const frontendStatus = body.status;
      body.status = mapStatusToExternalAPI(body.status);
      console.log(`üìù Status mapping: ${frontendStatus} ‚Üí ${body.status}`);
    }
    
    console.log('üìù Mapped request body:', JSON.stringify(body, null, 2));
    
    // ‡πÉ‡∏ä‡πâ External API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    console.log('üåê Calling external API...');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
    
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ endpoint ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    const endpoints = [
      `${EXTERNAL_API_BASE}/vehicles/${id}`,
      `${EXTERNAL_API_BASE}/vehicles`,
      `${EXTERNAL_API_BASE}/vehicle/${id}`,
      `${EXTERNAL_API_BASE}/vehicle`
    ];
    
    let lastError = null;
    
    for (const endpoint of endpoints) {
      try {
        console.log(`üîÑ Trying endpoint: ${endpoint}`);
        
        const response = await fetch(endpoint, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ ...body, id }),
          signal: controller.signal,
        });

        console.log(`üåê External API response status for ${endpoint}:`, response.status);

        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ External API success (PUT method - creating serial history)');
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÉ‡∏ä‡πâ originalBody ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö)
          try {
            await createSerialHistory(id, originalBody, data);
            console.log('‚úÖ Serial History created successfully');
          } catch (historyError) {
            console.error('‚ùå Error creating Serial History:', historyError);
          }
          
          clearTimeout(timeoutId);
          return NextResponse.json(data);
        } else if (response.status !== 405 && response.status !== 404) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Method Not Allowed ‡∏´‡∏£‡∏∑‡∏≠ Not Found ‡πÉ‡∏´‡πâ return error
          const errorText = await response.text();
          console.log('‚ùå Error response:', errorText);
          clearTimeout(timeoutId);
          return NextResponse.json(
            { 
              success: false, 
              message: `External API failed with status ${response.status}`,
              details: errorText
            },
            { status: response.status }
          );
        } else {
          console.log(`‚ö†Ô∏è Endpoint ${endpoint} not supported (${response.status}), trying next...`);
          lastError = await response.text();
        }
      } catch (endpointError) {
        console.log(`‚ùå Error with endpoint ${endpoint}:`, endpointError);
        lastError = endpointError;
        continue;
      }
    }
    
    clearTimeout(timeoutId);
    
    // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å endpoint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    console.error('‚ùå All endpoints failed');
    return NextResponse.json(
      { 
        success: false, 
        message: 'All external API endpoints failed',
        details: lastError instanceof Error ? lastError.message : lastError
      },
      { status: 500 }
    );
    
  } catch (error) {
    console.error('‚ùå Error updating vehicle:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: 'Failed to update vehicle with external API',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const id = params.id;
    console.log('üîÑ DELETE /api/proxy/vehicles/[id] - External API Only');
    console.log('üìù Vehicle ID:', id);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History
    let vehicleData = null;
    try {
      const vehicle = await prisma.vehicle.findUnique({
        where: { id }
      });
      vehicleData = vehicle;
    } catch (error) {
      console.log('‚ö†Ô∏è Could not fetch vehicle data for serial history:', error);
    }
    
    // ‡πÉ‡∏ä‡πâ External API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    console.log('üåê Calling external API...');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
    
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ endpoint ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    const endpoints = [
      `${EXTERNAL_API_BASE}/vehicles/${id}`,
      `${EXTERNAL_API_BASE}/vehicle/${id}`
    ];
    
    let lastError = null;
    
    for (const endpoint of endpoints) {
      try {
        console.log(`üîÑ Trying DELETE endpoint: ${endpoint}`);
        
        const response = await fetch(endpoint, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          signal: controller.signal,
        });

        console.log(`üåê External API response status for ${endpoint}:`, response.status);

        if (response.ok) {
          console.log('‚úÖ External API success (DELETE method - creating serial history)');
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          if (vehicleData) {
            try {
              await createSerialHistory(id, vehicleData, { deleted: true });
              console.log('‚úÖ Serial History created successfully for deleted vehicle');
            } catch (historyError) {
              console.error('‚ùå Error creating Serial History for deleted vehicle:', historyError);
            }
          }
          
          clearTimeout(timeoutId);
          return NextResponse.json({ success: true, message: 'Vehicle deleted successfully' });
        } else if (response.status !== 405 && response.status !== 404) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Method Not Allowed ‡∏´‡∏£‡∏∑‡∏≠ Not Found ‡πÉ‡∏´‡πâ return error
          const errorText = await response.text();
          console.log('‚ùå Error response:', errorText);
          clearTimeout(timeoutId);
          return NextResponse.json(
            { 
              success: false, 
              message: `External API failed with status ${response.status}`,
              details: errorText
            },
            { status: response.status }
          );
        } else {
          console.log(`‚ö†Ô∏è Endpoint ${endpoint} not supported (${response.status}), trying next...`);
          lastError = await response.text();
        }
      } catch (endpointError) {
        console.log(`‚ùå Error with endpoint ${endpoint}:`, endpointError);
        lastError = endpointError;
        continue;
      }
    }
    
    clearTimeout(timeoutId);
    
    // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å endpoint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    console.error('‚ùå All endpoints failed');
    return NextResponse.json(
      { 
        success: false, 
        message: 'All external API endpoints failed',
        details: lastError instanceof Error ? lastError.message : lastError
      },
      { status: 500 }
    );
    
  } catch (error) {
    console.error('‚ùå Error deleting vehicle:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: 'Failed to delete vehicle with external API',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function PATCH(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const id = params.id;
    const originalBody = await request.json();
    console.log('üîÑ PATCH /api/proxy/vehicles/[id] - External API Only');
    console.log('üìù Vehicle ID:', id);
    console.log('üìù Original request body:', JSON.stringify(originalBody, null, 2));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ External API
    const body = { ...originalBody };
    
    // ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö External API
    if (body.status) {
      const frontendStatus = body.status;
      body.status = mapStatusToExternalAPI(body.status);
      console.log(`üìù Status mapping: ${frontendStatus} ‚Üí ${body.status}`);
    }
    
    console.log('üìù Mapped request body:', JSON.stringify(body, null, 2));
    
    // ‡πÉ‡∏ä‡πâ External API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    console.log('üåê Calling external API...');
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 second timeout
    
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ endpoint ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
    const endpoints = [
      `${EXTERNAL_API_BASE}/vehicles/${id}`,
      `${EXTERNAL_API_BASE}/vehicles`,
      `${EXTERNAL_API_BASE}/vehicle/${id}`,
      `${EXTERNAL_API_BASE}/vehicle`
    ];
    
    let lastError = null;
    
    for (const endpoint of endpoints) {
      try {
        console.log(`üîÑ Trying PATCH endpoint: ${endpoint}`);
        
        const response = await fetch(endpoint, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ ...body, id }),
          signal: controller.signal,
        });

        console.log(`üåê External API response status for ${endpoint}:`, response.status);

        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ External API success (PATCH method - creating serial history)');
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PATCH ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Serial History ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
          // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å External API ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ PATCH ‡πÅ‡∏ó‡∏ô PUT
          try {
            await createSerialHistory(id, originalBody, data);
            console.log('‚úÖ Serial History created successfully');
          } catch (historyError) {
            console.error('‚ùå Error creating Serial History:', historyError);
          }
          
          clearTimeout(timeoutId);
          return NextResponse.json(data);
        } else if (response.status !== 405 && response.status !== 404) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Method Not Allowed ‡∏´‡∏£‡∏∑‡∏≠ Not Found ‡πÉ‡∏´‡πâ return error
          const errorText = await response.text();
          console.log('‚ùå Error response:', errorText);
          clearTimeout(timeoutId);
          return NextResponse.json(
            { 
              success: false, 
              message: `External API failed with status ${response.status}`,
              details: errorText
            },
            { status: response.status }
          );
        } else {
          console.log(`‚ö†Ô∏è Endpoint ${endpoint} not supported (${response.status}), trying next...`);
          lastError = await response.text();
        }
      } catch (endpointError) {
        console.log(`‚ùå Error with endpoint ${endpoint}:`, endpointError);
        lastError = endpointError;
        continue;
      }
    }
    
    clearTimeout(timeoutId);
    
    // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å endpoint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    console.error('‚ùå All endpoints failed');
    return NextResponse.json(
      { 
        success: false, 
        message: 'All external API endpoints failed',
        details: lastError instanceof Error ? lastError.message : lastError
      },
      { status: 500 }
    );
    
  } catch (error) {
    console.error('‚ùå Error updating vehicle:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: 'Failed to update vehicle with external API',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}