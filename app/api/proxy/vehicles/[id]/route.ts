// app/api/proxy/vehicles/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db/prisma';

const EXTERNAL_API_BASE = process.env.EXTERNAL_API_BASE || 'https://api.example.com';

export async function GET(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const id = params.id;
    console.log('üîÑ GET /api/proxy/vehicles/[id] - Using External API');
    console.log('üìù Vehicle ID:', id);
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ External API
    console.log('üåê Fetching vehicle from external API...');
    
    const response = await fetch(`${EXTERNAL_API_BASE}/vehicles/${id}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      signal: AbortSignal.timeout(30000), // 30 second timeout
    });

    if (!response.ok) {
      console.log(`‚ùå External API error: ${response.status} ${response.statusText}`);
      
      if (response.status === 404) {
        return NextResponse.json(
          { 
            success: false, 
            message: 'Vehicle not found',
            details: `Vehicle with ID ${id} does not exist`
          },
          { status: 404 }
        );
      }
      
      throw new Error(`External API error: ${response.status} ${response.statusText}`);
    }

    const vehicleData = await response.json();
    console.log('‚úÖ Vehicle fetched successfully from external API');
    console.log('üìù Vehicle data:', JSON.stringify(vehicleData, null, 2));
    
    // ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å External API ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏¢‡∏±‡∏á frontend
    if (vehicleData.data && vehicleData.data.status) {
      vehicleData.data.status = mapStatusFromExternalAPI(vehicleData.data.status);
    } else if (vehicleData.status) {
      vehicleData.status = mapStatusFromExternalAPI(vehicleData.status);
    }
    
    return NextResponse.json(vehicleData);
    
  } catch (error) {
    console.error('‚ùå Error fetching vehicle from external API:', error);
    
    if (error instanceof Error && error.name === 'TimeoutError') {
      return NextResponse.json(
        { 
          success: false, 
          message: 'Request timeout',
          details: 'External API request timed out after 30 seconds'
        },
        { status: 504 }
      );
    }
    
    return NextResponse.json(
      { 
        success: false, 
        message: 'Failed to fetch vehicle from external API',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

// ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å frontend ‡πÑ‡∏õ‡∏¢‡∏±‡∏á External API
// ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ External API ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö frontend ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏°‡∏õ
function mapStatusToExternalAPI(status: string): string {
  // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á External API ‡πÄ‡∏•‡∏¢
  return status;
}

// ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å External API ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏¢‡∏±‡∏á frontend
// ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ External API ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö frontend ‡πÅ‡∏•‡πâ‡∏ß
function mapStatusFromExternalAPI(externalStatus: string): string {
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
  const legacyStatusMap: { [key: string]: string } = {
    'inactive': 'maintenance', // inactive ‡πÄ‡∏Å‡πà‡∏≤ -> ‡∏£‡∏≠‡∏ã‡πà‡∏≠‡∏°
    'spare': 'retired',        // spare ‡πÄ‡∏Å‡πà‡∏≤ -> ‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
    'parked': 'ready'          // parked ‡πÄ‡∏Å‡πà‡∏≤ -> ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ
  };
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏°‡∏õ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
  return legacyStatusMap[externalStatus] || externalStatus;
}

// ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
function getStatusLabel(status: string): string {
  switch (status) {
    case 'active': return '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
    case 'ready': return '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ';
    case 'maintenance': return '‡∏£‡∏≠‡∏ã‡πà‡∏≠‡∏°';
    case 'retired': return '‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß';
    case 'parked': return '‡∏à‡∏≠‡∏î‡πÑ‡∏ß‡πâ';
    case 'spare': return '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà';
    case 'inactive': return '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
    default: return '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
async function createSerialHistory(vehicleId: string, originalBody: any, updatedData: any) {
  try {
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å External API ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const currentVehicle = updatedData;

    if (!currentVehicle) {
      console.log('‚ö†Ô∏è Vehicle data not available, skipping serial history');
      return;
    }

    const changes: string[] = [];
    
    // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)
    if (originalBody.serial_number && originalBody.serial_number.trim() !== currentVehicle.serial_number) {
      changes.push(`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ã‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏•: ${currentVehicle.serial_number} ‚Üí ${originalBody.serial_number.trim()}`);
    }
    if (originalBody.vehicle_number && originalBody.vehicle_number.trim() !== currentVehicle.vehicle_number) {
      changes.push(`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏£‡∏ñ: ${currentVehicle.vehicle_number} ‚Üí ${originalBody.vehicle_number.trim()}`);
    }
    if (originalBody.golf_course_name && originalBody.golf_course_name.trim() !== currentVehicle.golf_course_name) {
      changes.push(`‡∏™‡∏ô‡∏≤‡∏°: ${currentVehicle.golf_course_name} ‚Üí ${originalBody.golf_course_name.trim()}`);
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏à‡∏≤‡∏Å frontend
    if (originalBody.status) {
      // ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å External API ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô frontend status
      const currentExternalStatus = currentVehicle.status || 'active';
      const currentFrontendStatus = mapStatusFromExternalAPI(currentExternalStatus);
      const newFrontendStatus = originalBody.status; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å frontend
      
      if (currentFrontendStatus !== newFrontendStatus) {
        const currentStatusLabel = getStatusLabel(currentFrontendStatus);
        const newStatusLabel = getStatusLabel(newFrontendStatus);
        changes.push(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${currentStatusLabel} ‚Üí ${newStatusLabel}`);
      }
    }
    
    if (originalBody.model && originalBody.model.trim() !== (currentVehicle.model || '')) {
      changes.push(`‡∏£‡∏∏‡πà‡∏ô: ${currentVehicle.model || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‚Üí ${originalBody.model.trim()}`);
    }
    if (originalBody.battery_serial !== undefined) {
      const newBattery = originalBody.battery_serial?.trim() || '';
      const currentBattery = currentVehicle.battery_serial || '';
      if (newBattery !== currentBattery) {
        changes.push(`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà: ${currentBattery || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‚Üí ${newBattery || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      }
    }
    
    if (changes.length > 0) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History ‡∏ú‡πà‡∏≤‡∏ô Prisma (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Serial History ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô)
      await prisma.serialHistoryEntry.create({
        data: {
          serial_number: originalBody.serial_number?.trim() || currentVehicle.serial_number,
          vehicle_number: originalBody.vehicle_number?.trim() || currentVehicle.vehicle_number,
          action_type: 'data_edit',
          action_date: new Date(),
          details: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ - ${changes.join(', ')}`,
          is_active: true,
          status: 'completed',
          golf_course_name: originalBody.golf_course_name?.trim() || currentVehicle.golf_course_name,
          vehicle_id: vehicleId,
          performed_by_id: '000000000000000000000001' // Default admin ID
        }
      });
      
      console.log('‚úÖ Serial history created successfully:', changes);
    } else {
      console.log('‚ÑπÔ∏è No changes detected, skipping serial history');
    }
  } catch (error) {
    console.error('‚ùå Error creating serial history:', error);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏•‡∏±‡∏Å
  }
}



export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const id = params.id;
    const originalBody = await request.json();
    console.log('üîÑ PUT /api/proxy/vehicles/[id] - Using External API');
    console.log('üìù Vehicle ID:', id);
    console.log('üìù Original request body:', JSON.stringify(originalBody, null, 2));
    
    // ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å frontend ‡πÑ‡∏õ‡∏¢‡∏±‡∏á External API
    const requestBody = { ...originalBody };
    if (requestBody.status) {
      requestBody.status = mapStatusToExternalAPI(requestBody.status);
      console.log('üìù Mapped status for external API:', requestBody.status);
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ External API
    console.log('üåê Updating vehicle via external API...');
    
    const response = await fetch(`${EXTERNAL_API_BASE}/vehicles/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      signal: AbortSignal.timeout(30000), // 30 second timeout
    });

    if (!response.ok) {
      console.log(`‚ùå External API error: ${response.status} ${response.statusText}`);
      throw new Error(`External API error: ${response.status} ${response.statusText}`);
    }

    const updatedData = await response.json();
    console.log('‚úÖ Vehicle updated successfully via external API');
    console.log('üìù Updated vehicle data:', JSON.stringify(updatedData, null, 2));
    
    // ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å External API
    if (updatedData.data && updatedData.data.status) {
      updatedData.data.status = mapStatusFromExternalAPI(updatedData.data.status);
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    try {
      await createSerialHistory(id, originalBody, updatedData.data || updatedData);
      console.log('‚úÖ Serial History created successfully');
    } catch (historyError) {
      console.error('‚ùå Error creating Serial History:', historyError);
    }
    
    return NextResponse.json(updatedData);
    
  } catch (error) {
    console.error('‚ùå Error updating vehicle via external API:', error);
    
    if (error instanceof Error && error.name === 'TimeoutError') {
      return NextResponse.json(
        { 
          success: false, 
          message: 'Request timeout',
          details: 'External API request timed out after 30 seconds'
        },
        { status: 504 }
      );
    }
    
    return NextResponse.json(
      { 
        success: false, 
        message: 'Failed to update vehicle via external API',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const id = params.id;
    console.log('üîÑ DELETE /api/proxy/vehicles/[id] - Using External API');
    console.log('üìù Vehicle ID:', id);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History
    let vehicleData = null;
    try {
      const getResponse = await fetch(`${EXTERNAL_API_BASE}/vehicles/${id}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        signal: AbortSignal.timeout(30000),
      });
      
      if (getResponse.ok) {
        const vehicleResponse = await getResponse.json();
        vehicleData = vehicleResponse.data || vehicleResponse;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Could not fetch vehicle data for serial history:', error);
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ External API
    console.log('üåê Deleting vehicle via external API...');
    
    const response = await fetch(`${EXTERNAL_API_BASE}/vehicles/${id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
      signal: AbortSignal.timeout(30000), // 30 second timeout
    });

    if (!response.ok) {
      console.log(`‚ùå External API error: ${response.status} ${response.statusText}`);
      throw new Error(`External API error: ${response.status} ${response.statusText}`);
    }

    const deletedData = await response.json();
    console.log('‚úÖ Vehicle deleted successfully via external API');
    console.log('üìù Deleted vehicle data:', JSON.stringify(deletedData, null, 2));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (vehicleData) {
      try {
        await createSerialHistory(id, vehicleData, { deleted: true });
        console.log('‚úÖ Serial History created successfully for deleted vehicle');
      } catch (historyError) {
        console.error('‚ùå Error creating Serial History for deleted vehicle:', historyError);
      }
    }
    
    return NextResponse.json(deletedData);
    
  } catch (error) {
    console.error('‚ùå Error deleting vehicle via external API:', error);
    
    if (error instanceof Error && error.name === 'TimeoutError') {
      return NextResponse.json(
        { 
          success: false, 
          message: 'Request timeout',
          details: 'External API request timed out after 30 seconds'
        },
        { status: 504 }
      );
    }
    
    return NextResponse.json(
      { 
        success: false, 
        message: 'Failed to delete vehicle via external API',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function PATCH(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const id = params.id;
    const originalBody = await request.json();
    console.log('üîÑ PATCH /api/proxy/vehicles/[id] - Using External API');
    console.log('üìù Vehicle ID:', id);
    console.log('üìù Original request body:', JSON.stringify(originalBody, null, 2));
    
    // ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å frontend ‡πÑ‡∏õ‡∏¢‡∏±‡∏á External API
    const requestBody = { ...originalBody };
    if (requestBody.status) {
      requestBody.status = mapStatusToExternalAPI(requestBody.status);
      console.log('üìù Mapped status for external API:', requestBody.status);
    }
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ External API
    console.log('üåê Updating vehicle via external API (PATCH)...');
    
    const response = await fetch(`${EXTERNAL_API_BASE}/vehicles/${id}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      signal: AbortSignal.timeout(30000), // 30 second timeout
    });

    if (!response.ok) {
      console.log(`‚ùå External API error: ${response.status} ${response.statusText}`);
      throw new Error(`External API error: ${response.status} ${response.statusText}`);
    }

    const updatedData = await response.json();
    console.log('‚úÖ Vehicle updated successfully via external API (PATCH)');
    console.log('üìù Updated vehicle data:', JSON.stringify(updatedData, null, 2));
    
    // ‡πÅ‡∏°‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å External API
    if (updatedData.data && updatedData.data.status) {
      updatedData.data.status = mapStatusFromExternalAPI(updatedData.data.status);
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Serial History ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PATCH ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Serial History ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
    try {
      await createSerialHistory(id, originalBody, updatedData.data || updatedData);
      console.log('‚úÖ Serial History created successfully');
    } catch (historyError) {
      console.error('‚ùå Error creating Serial History:', historyError);
    }
    
    return NextResponse.json(updatedData);
    
  } catch (error) {
    console.error('‚ùå Error updating vehicle via external API (PATCH):', error);
    
    if (error instanceof Error && error.name === 'TimeoutError') {
      return NextResponse.json(
        { 
          success: false, 
          message: 'Request timeout',
          details: 'External API request timed out after 30 seconds'
        },
        { status: 504 }
      );
    }
    
    return NextResponse.json(
      { 
        success: false, 
        message: 'Failed to update vehicle via external API',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}